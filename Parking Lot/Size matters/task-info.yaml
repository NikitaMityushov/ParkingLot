type: edu
custom_name: stage4
files:
- name: src/parking/Main.kt
  visible: true
  text: |
    package parking

    fun main() {
        println("White car has parked.")
        println("Yellow car left the parking lot.")
        println("Green car just parked here.")
    }
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    fun inputCase(
            input: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(InputClue(input, isPrivate, hint), input)

    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String): CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my != his) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size} " +
                        "lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task4Test : StageTest<OutputClue>() {

        override fun generate() = listOf(
                outputCase(
                        """
                            park KA-01-HH-9999 White
                            create 3
                            status
                            park KA-01-HH-9999 White
                            park KA-01-HH-3672 Green
                            park Rs-P-N-21 Red
                            leave 2
                            status
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Created a parking lot with 3 spots.
                            Parking lot is empty.
                            White car parked in spot 1.
                            Green car parked in spot 2.
                            Red car parked in spot 3.
                            Spot 2 is free.
                            1 KA-01-HH-9999 White
                            3 Rs-P-N-21 Red
                """.trimAllIndents(),
                        hint = "See example 1."),
                outputCase(
                        """
                            park KA-01-HH-9999 White
                            leave 1
                            status
                            exit
                        """.trimAllIndents(),
                        """
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                            Sorry, a parking lot has not been created.
                """.trimAllIndents(),
                        true,
                        hint = "Check commands until the parking is created."),
                outputCase(
                        """
                            create 3
                            park KA-01-HH-9999 White
                            park KA-01-HH-9998 Red
                            status
                            create 1
                            status
                            park KA-01-HH-9999 Black
                            status
                            park KA-01-HH-9998 Black
                            exit
                        """.trimAllIndents(),
                        """
                            Created a parking lot with 3 spots.
                            White car parked in spot 1.
                            Red car parked in spot 2.
                            1 KA-01-HH-9999 White
                            2 KA-01-HH-9998 Red
                            Created a parking lot with 1 spots.
                            Parking lot is empty.
                            Black car parked in spot 1.
                            1 KA-01-HH-9999 Black
                            Sorry, the parking lot is full.
                """.trimAllIndents(),
                        true,
                        hint = "Try to recreate the parking.")


        )


        override fun check(reply: String, clue: OutputClue): CheckResult {

            return clue.compareLines(reply)
        }
    }

  learner_created: false
- name: src/parking/Controller.kt
  visible: true
  text: |-
    package parking

    class Controller {
        private val parking = ParkingService()

        fun display(input: String) {
            val parseResponse = parseNumberService(input)

            if (parseResponse.parseStatus == ParseStatus.PARK) {
                val parkingResponce = parking.park(parseResponse.carNumber)

                if (parkingResponce.transactionResult == TransactionResult.DONE) {
                    println("${parseResponse.carColor.capitalize()} car parked in spot ${parkingResponce.lot}.")
                } else {
                    println("Sorry, the parking lot is full.")
                }
            } else if (parseResponse.parseStatus == ParseStatus.LEAVE) {
                val parkingResponce = parking.leave(parseResponse.leaveSpot)
                if (parkingResponce) {
                    println("Spot ${parseResponse.leaveSpot} is free.")
                } else {
                    println("There is no car in spot ${parseResponse.leaveSpot}.")
                }
            }
        }

    }
  learner_created: true
- name: src/parking/UI.kt
  visible: true
  text: |-
    package parking

    class UI {
        private val controller: Controller = Controller()

        fun start() {
            var input = readLine()!!.toString()

            while (!input.equals("exit", true)) {
                controller.display(input)
                input = readLine()!!.toString()
            }

        }
    }
  learner_created: true
- name: src/parking/CarNumberParser.kt
  visible: true
  text: |-
    package parking

    class CarNumberParser {
    }

    enum class ParseStatus {
        ERROR, PARK, LEAVE
    }

    // DTO
    data class ParseResultMessage(
        val parseStatus: ParseStatus,
        val carColor: String = "",
        val carNumber: String = "",
        val leaveSpot: Int = 0
    )

    fun parseNumberService(str: String): ParseResultMessage {
        val parkRegex = "park*".toRegex()
        val leaveRegex = "leave*".toRegex()

        val listNumber = str.toLowerCase().split(" ")

        if (listNumber[0].matches(parkRegex)) {
            return ParseResultMessage(
                parseStatus = ParseStatus.PARK,
                carColor = listNumber[2],
                carNumber = listNumber[1])
        }

        if (listNumber[0].matches(leaveRegex)) {
            return ParseResultMessage(
                parseStatus = ParseStatus.LEAVE,
                leaveSpot = listNumber[1].toInt())
        }

        return ParseResultMessage(ParseStatus.ERROR)
    }
  learner_created: true
- name: src/parking/ParkingService.kt
  visible: true
  text: |-
    package parking

    interface ParkingInterface {
        fun park(carNumber: String): ParkingResponceMessage
        fun leave(lot: Int): Boolean
    }

    enum class ParkingStatus {
        FREE, OCCUPIED
    }

    enum class TransactionResult {
        DONE, NO_AVAILABLE_LOTS
    }

    // dto
    data class ParkingResponceMessage(
        val transactionResult: TransactionResult,
        val lot: Int = 0,
    )

    class ParkingService: ParkingInterface {

        private val lots = mutableMapOf<Int, ParkingStatus>()

        init {
            for (i in 1..20) {
                lots[i] = ParkingStatus.FREE
            }
        }

        override fun park(carNumber: String): ParkingResponceMessage {
            for(lot in lots) {
                if (lot.value == ParkingStatus.FREE) {
                    lots[lot.key] = ParkingStatus.OCCUPIED

                    return ParkingResponceMessage(
                        transactionResult = TransactionResult.DONE,
                        lot = lot.key
                    )

                }
            }

            return ParkingResponceMessage(
                transactionResult = TransactionResult.NO_AVAILABLE_LOTS
            )
        }

        override fun leave(lot: Int): Boolean {
            if (lots[lot] != ParkingStatus.FREE) {
                lots[lot] = ParkingStatus.FREE
                return true
            }
            return false
        }
    }
  learner_created: true
- name: src/parking/MainService.kt
  visible: true
  text: |-
    package parking

    class MainService {
        private lateinit var parkingService: ParkingInterface
        private lateinit var parser: CarNumberParser

        fun init() {

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/6600#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Nov 2021 19:40:41 UTC
record: 4
