type: edu
custom_name: stage3
files:
- name: src/parking/Main.kt
  visible: true
  text: |
    package parking

    fun main() {
        println("White car has parked.")
        println("Yellow car left the parking lot.")
        println("Green car just parked here.")
    }
  learner_created: false
- name: test/ParkingTest.kt
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase


    /** Default testCase. */
    fun <T> testCase(attach: T, input: String) = TestCase<T>().apply {
        setInput(input)
        setAttach(attach)
    }

    open class InputClue(
            val input: String,
            /** Do not show correct output and input. */
            val isPrivate: Boolean = false,
            /** Hint will be printed even for private tests. */
            val hint: String? = null
    ) {

        /** Ciphers [message] or adds a [hint] to the error if it is not null. */
        fun toFailure(message: String): CheckResult {
            if (isPrivate) {
                // Ciphered
                return CheckResult.wrong("Incorrect output. This is a private test. " + (hint ?: ""))
            } else {
                return CheckResult.wrong("$message ${hint ?: ""}")
            }
        }
    }

    class OutputClue(input: String, val output: String, isPrivate: Boolean, hint: String?)
        : InputClue(input, isPrivate, hint) {

        fun compareLines(reply: String) : CheckResult {
            val hisLines = reply.trim().lines()
            val myLines = output.trim().lines()

            myLines.zip(hisLines).withIndex().forEach { (i, pair) ->
                val (my, his) = pair
                if (my != his) {
                    return toFailure("Error in line ${i + 1}: \"$his\" instead of \"$my\".")
                }
            }
            // if all common lines are correct, but sizes are different.
            if (hisLines.size != myLines.size) {
                return toFailure("Your output contains ${hisLines.size}" +
                        " lines instead of ${myLines.size}.")
            }
            return CheckResult.correct();
        }
    }

    fun outputCase(
            input: String,
            output: String,
            isPrivate: Boolean = false,
            hint: String? = null
    ) = testCase(OutputClue(input, output, isPrivate, hint), input)

    /** Trim Starts of all lines and trim empty lines. */
    fun String.trimAllIndents() = this.lines()
            .map { it.trimStart() }
            .dropWhile { it.isBlank() }
            .dropLastWhile { it.isBlank() }
            .joinToString("\n")


    class Task3Test : StageTest<OutputClue>() {

        override fun generate(): List<TestCase<OutputClue>> {
            // 20 cars
            val stripedCars = List(10) { i ->
                listOf("park KA-$i-HH-9999 White",
                        "park KA-$i-HH-3672 Green")
            }
                    .flatten()
                    .joinToString("\n")

            val stripedAns = List(10) { i ->
                listOf("White car parked in spot ${2 * i + 1}.",
                        "Green car parked in spot ${2 * i + 2}.")
            }
                    .flatten()
                    .joinToString("\n")


            return listOf(
                    outputCase(
                            """$stripedCars
                                park Rs-P-N-21 Red
                                leave 1
                                park Rs-P-N-21 Red
                                exit
                            """.trimAllIndents(),
                            """
                                $stripedAns
                                Sorry, the parking lot is full.
                                Spot 1 is free.
                                Red car parked in spot 1.
                            """.trimAllIndents(),
                            hint = "See example 1."),
                    outputCase(
                            """
                                $stripedCars
                                park Rs-P-N-21 Red
                                park ABC Green
                                leave 5
                                leave 1
                                leave 20
                                park Rs-P-N-21 White
                                park Rs-P-N-22 Blue
                                park Rs-P-N-23 Red
                                park A B
                                exit
                            """.trimAllIndents(),
                            """
                                $stripedAns
                                Sorry, the parking lot is full.
                                Sorry, the parking lot is full.
                                Spot 5 is free.
                                Spot 1 is free.
                                Spot 20 is free.
                                White car parked in spot 1.
                                Blue car parked in spot 5.
                                Red car parked in spot 20.
                                Sorry, the parking lot is full.
                            """.trimAllIndents(),
                            isPrivate = true,
                            hint = "Spots should be assigned in ascending order.")
            )
        }


        override fun check(reply: String, clue: OutputClue): CheckResult {

            return clue.compareLines(reply)
        }
    }

  learner_created: false
- name: src/parking/CarNumberParser.kt
  visible: true
  text: |-
    package parking

    class CarNumberParser {
    }

    enum class ParseStatus {
        ERROR, PARK, LEAVE
    }

    // DTO
    data class ParseResultMessage(
        val parseStatus: ParseStatus,
        val carColor: String = "",
        val carNumber: String = "",
        val leaveSpot: Int = 0
    )

    fun parseNumberService(str: String): ParseResultMessage {
        val parkRegex = "park*".toRegex()
        val leaveRegex = "leave*".toRegex()

        val listNumber = str.toLowerCase().split(" ")

        if (listNumber[0].matches(parkRegex)) {
            return ParseResultMessage(
                parseStatus = ParseStatus.PARK,
                carColor = listNumber[2],
                carNumber = listNumber[1])
        }

        if (listNumber[0].matches(leaveRegex)) {
            return ParseResultMessage(
                parseStatus = ParseStatus.LEAVE,
                leaveSpot = listNumber[1].toInt())
        }

        return ParseResultMessage(ParseStatus.ERROR)
    }
  learner_created: true
- name: src/parking/ParkingService.kt
  visible: true
  text: |-
    package parking

    interface ParkingInterface {
        fun park(carNumber: String): ParkingResponceMessage
        fun leave(lot: Int): Boolean
    }

    enum class ParkingStatus {
        FREE, OCCUPIED
    }

    enum class TransactionResult {
        DONE, NO_AVAILABLE_LOTS
    }

    // dto
    data class ParkingResponceMessage(
        val transactionResult: TransactionResult,
        val lot: Int = 0,
    )

    class ParkingService: ParkingInterface {

        private val lots = hashMapOf(
            1 to ParkingStatus.OCCUPIED,
            2 to ParkingStatus.FREE
        )

        override fun park(carNumber: String): ParkingResponceMessage {
            for(lot in lots) {
                if (lot.value == ParkingStatus.FREE) {
                    lots[lot.key] = ParkingStatus.OCCUPIED

                    return ParkingResponceMessage(
                        transactionResult = TransactionResult.DONE,
                        lot = lot.key
                    )

                }
            }

            return ParkingResponceMessage(
                transactionResult = TransactionResult.NO_AVAILABLE_LOTS
            )
        }

        override fun leave(lot: Int): Boolean {
            return (lots[lot] != ParkingStatus.FREE)
        }
    }
  learner_created: true
- name: src/parking/MainService.kt
  visible: true
  text: |-
    package parking

    class MainService {
        private lateinit var parkingService: ParkingInterface
        private lateinit var parser: CarNumberParser

        fun init() {

        }
    }
  learner_created: true
- name: src/parking/UI.kt
  visible: true
  learner_created: true
- name: src/parking/Controller.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/6599#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 29 Nov 2021 05:10:34 UTC
record: 3
